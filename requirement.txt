이 프로그램은 엑셀 파일을 읽어서 ReactFlow로 흐름을 보여주는 프로그램이다.

- 엑셀 Columns
작성팀 (일자) : string (string 하나일수도, string/string/string 형식으로 여러 팀일수도, prevTeam -> currTeam 형식으로 있을 수 있다.)
Level(*) : "L4"|"L5"|"L6"
L1 : string (별로 중요하지 않다. 보관만 하는 데이터)
L2 : string (별로 중요하지 않다. 보관만 하는 데이터)
L3 : string (별로 중요하지 않다. 보관만 하는 데이터)
L4 : string ([Sensor] 혹은 [Sensor]_ 형식의 prefix가 있다. Display시에는 prefix를 생략한다.)
L5 : string (Level(*)이 L4일 경우 비어있음)
L6 : string (Level(*)이 L4이거나 L5일 경우 비어있음)
필요인력 : number
필요기간 : number
MM : number (필요인력과 필요기간의 곱이다.)
정의 : string
프로세스 오너부서(L5) : string
산출물(L5) : string
선행 프로세스(L5) : string (L5의 값이 프로세스의 이름)
후행 프로세스(L5) : string (L5의 값이 프로세스의 이름)
준수지표(L5) : string (별로 중요하지않고 비어있을 확률이 높다.)
소요기간(L5) : string (별로 중요하지않고 비어있을 확률이 높다.)
수행주기(L5) : string (별로 중요하지않고 비어있을 확률이 높다.)
참여(L5) : string (별로 중요하지않고 비어있을 확률이 높다.)
바로가기 URL(L5) : string (별로 중요하지않고 비어있을 확률이 높다.)
업무담당부서(L6) : string
참여부서(L6) : string
시스템 : "수작업", "Smart D&E", "기타"같은 느낌의 문자열
작업방식(L6) : "회의", "email", "ppt"같은 느낌의 문자열
후행 액티비티(L6) : string (L6의 값이 프로세스의 이름)
L6의 선행 L5 : string (L5의 값이 프로세스의 이름)
L6의 후행 L5 : string (L5의 값이 프로세스의 이름)
수행 milestone : string

위 Column의 이름은 첫 행에 기록된다.
경우에 따라 특정 Column이 없더라도 순서 기반이 아니라 첫 행의 Column명을 기반으로 로드한다.
읽은 데이터는 타입스크립트 객체 형태로 보관한다.

- 선행, 후행 프로세스나 task가 여러개일 경우 '|'를 이용하여 구분한다.

0. Task define
- 각 row는 하나의 Task를 정의합니다.
- L5, L6 각각에 대한 선행 후행 task는 선행 프로세스(L5), 후행 액티비티(L6), L6의 선행 L5를 기준으로 한다.
- 선행, 후행 Task들이 여럿일 경우 '|'를 이용하여 구분한다.

1. work flow 정의
- 기본 화면은 L5의 연결관계 그래프이다. React Flow를 통해 구현한다. (L1, L2, L3는 무시한다.)
- 특정 노드를 클릭하면 관련된 선행, 후행 workflow만 그래프에서 보이고, 그 노드를 한번 더 클릭하면 L6까지 타고 들어가서 
- L6단계의 work flow는 어느 L5 소속인지 표현이 있고, 연결되는 선행/후행 process도 나타내기 쉽게 표현한다.
- 각 노드는 P(필요인력), T(필요시간 - W 기준), MM(P*T, Month기준)을 함께 보여줍니다.
- 후행이 더 이상 없는 가장 마지막 단계인 task들이 가장 왼쪽에 배치됩니다.
- 가장 왼쪽에 배치되는 task들은 해당 task까지 오기 위해서 누적된 MM의 합계를 보여줍니다.
- 특정 task를 검색하는 기능을 지원합니다.
- 노드들의 task이름이 잘드러나도록 합니다. 화살표가 한방향으로만 흐르지 않기때문에 화살표가 노드를 가로질러서 가릴 수 있기때문입니다.
- L4 소속별로 서로 다른 색을 가집니다.
- 만약 양방향 task를 갖는 경우, 에러 report를 생성하고, 노드에서도 잘드러나도록 표시합니다.
- display시 task 이름에서 [Sensor], [Sensor]_는 삭제합니다.

2. MM summary 정의
- 각 L5는 L6들의 P, T, MM들의 합계를 가집니다.
- L5들의 각각의 task들을 MM 기준으로 큰 순서로 sorting해서 보여주는 table 기능이 있습니다.
- 위 테이블에서 특정 L5 task를 클릭하면 , L5의 L6 Sequence를 보여주는 graph로 넘어갑니다.
- 1번의 설명에서 가장 왼쪽에 배치되는 task들에 대한 MM sorting을 보여주는 table 기능이 있습니다.
- 위 테이블에서 특정 task를 클릭하면 관련된 work flow를 highligh하는 graph로 넘어갑니다.


------------------------

기본적인 정의는 위와 같고 구현적인 측면에서 부가설명할께.
- mysql은 일단은 쓰지 않을거야. 엑셀을 읽어서 보여주는 뷰어 프로그램이야.
- L1, L2, L3는 안써
- L4는 legend처럼 각 노드의 카테고리 역할을 해. 그래서 L5, L6는 다 L4에 따라 다른 색상을 가져.
- 맨 처음 켜면 L5의 그래프가 표현이 돼. L6는 일단 안나와
- L5 노드를 클릭하면 그 노드와 연관된 노드 및 연결만 나와.
- L5 노드를 더블클릭하면 L5에 해당하는 L6의 흐름만 보여.
- 이동할 수 있으니 다시 돌아갈 수 있는 UI도 당연히 있어야겠지

-----------------------------

코딩 스타일 측면에서,
컴포넌트를 최대한 쪼개서 내가 보고 이해하기 쉽게 만들어야해.
useContext나 상태관리 패턴을 쓰는것도 좋아. 근데 상태관리 패턴을 써보지는 않아서 간단한걸로 해줘. zustard나.
엑셀의 입력상태가 안좋을 수 있어. 각 부서에서 취합하는것이거든. 그래서 엑셀에 값이 제대로 안들어가있어도 동작을 하고 대신 노드에 해당 부분이 제대로 입력되지 않았다고 하는게 좋을거같아.

----------------

부가설명
- 흐름이 이래. L5는 선행 프로세스(L5)가 만족되어야 실행가능해. 각 L5는 이제 이거에 해당하는 L6들을 실행시켜. 그러다가 L6의 후행 L5에 해당하는 L5가 다시 실행되는거지.